<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="flexlib.containers.*"
	layout="absolute" width="800" height="600" windowComplete="init()">
<mx:Script>
<![CDATA[
	import mx.events.FlexEvent;
	import flexlib.events.SuperTabEvent;
	import flexlib.events.RightClickMenuEvent;
	import mx.events.IndexChangedEvent;
	import mx.events.MenuEvent;
	import mx.core.Container;
	import mx.containers.*;
	import mx.controls.Label;
	import mx.controls.HTML;
	import flexlib.controls.tabBarClasses.SuperTab;
	import mx.events.ListEvent;
	[Bindable]
	public var contexts:XML;
	public var homepage:String = "http://www.google.ca";
	public var contextFilename:String = "test.xml";
	public var currentListIndex:int = -1;
	
	private var floatPanelTimer:Timer;
	
	[Embed(source="./flexlib/assets/document.png")]
	private var document_icon:Class;
	
	[Embed(source="./flexlib/assets/home.png")]
	private var home_icon:Class;

	// functino to handle all context menu evevnts
	public function contextMenuEventHandler(e:RightClickMenuEvent): void
	{
		trace(e.target.toString());
		trace(e.clickedItem);
		// right click menu handler
		switch(e.clickedItem)
		{
			case "Add Context":
				contextTabBar.dispatchEvent(new Event(SuperTabNavigator.AddTabEvent));
				break;
			case "Add Tab":
				getCurrentTabNavigator().dispatchEvent(new Event(SuperTabNavigator.AddTabEvent));
				break;
			case "Rename Context":
				e.clickedTab.editableLabel= true;
				break;
			case "Hibernate Context":
			case "Hibernate Tab":
				e.clickedTab.dispatchEvent(new Event(SuperTab.CLOSE_TAB_EVENT));
				break;
			case "Bookmark Tab":
				var tabIndex:Number = getCurrentTabNavigator().getTabBar().getChildIndex(e.clickedTab);
				var tabAddress:String = Tab(getCurrentTabNavigator().getChildAt(tabIndex)).htmlPane.location;
				addBookmarkToContext(Context(contextTabBar.selectedChild), e.clickedTab.label, tabAddress);
				break;	
			case "Delete Context":
				break;
			case "Delete Tab":
				break;
		}
		
	}
	
	public function init():void
	{
		//save before exiting
		NativeApplication.nativeApplication.addEventListener(Event.EXITING, applicationExitHandler);
		
		contextTabBar.setType(SuperTabNavigator.CONTEXT, contextMenuEventHandler);
		contextTabBar.addEventListener(SuperTabNavigator.AddTabEvent, addContextWithTabBarButton);
		contextTabBar.addEventListener(IndexChangedEvent.CHANGE, updateAddressBar);
		contextTabBar.addEventListener(SuperTabEvent.TAB_CLOSE, contextClose);
	
		contextTabBar.addEventListener(SuperTabEvent.TAB_UPDATED, contextTabRenamed);
		
		loadContexts();
		initContexts();
		
		floatPanelTimer = new Timer(250);
		floatPanelTimer.addEventListener(TimerEvent.TIMER, floatPanelTimerTimeout);
		floatPanelTimer.start();
		
	}
	
	public function applicationExitHandler(e:Event):void
	{
		saveContexts();
	}
	
	public function loadContexts():void
	{
		var file:File = File.applicationDirectory.resolvePath(contextFilename);
        var fileStream:FileStream = new FileStream();
        fileStream.open(file, FileMode.READ);
        var stringRead:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
        contexts = XML(stringRead);
        fileStream.close();
	}
	
	public function saveContexts():void
	{
		var file:File = new File(File.applicationDirectory.nativePath.toString() + "/" + contextFilename);
        var fileStream:FileStream = new FileStream();
        fileStream.open(file, FileMode.WRITE);
        fileStream.writeUTFBytes(contexts.toXMLString());
        fileStream.close();
	}
	
	public function initContexts():void
	{
		var activeContexts:XMLList = contexts.context.(@active == 'true');
		if( activeContexts.length() == 0 )
		{
			var newContextXML:XML = <context active="true" label="Default"><tabs label="Tabs"/></context>; 
			contexts.appendChild(newContextXML);
    		var defaultContext:Context = addContext("Default", newContextXML);
    		var newTabXML:XML =new XML("<tab label=\"" + homepage + "\" address=\"" + homepage + "\" />") 
    		newContextXML.tabs[0].appendChild(newTabXML);
    		addTab(newTabXML, defaultContext.navigator);
        } else
        {
        	for each (var activeContext:XML in activeContexts)
        	{
                var currentContext:Context = addContext(activeContext.@label, activeContext);
                for each (var tab:XML in activeContext.tabs.tab)
                {
                	addTab(tab, currentContext.navigator);
                }
        	}
        }
	}
	
	public function getParentWithLocalName(localName:String, object:XML):XML
	{
		while (object.localName() != localName)
		{
			object = object.parent();
			if (object == null)
 				break;
		}
 			
		return object;
	}
	
	public function focusContextAndTab(target:XML):void
	{
		var data:XML = target;
		
		for each(var obj_context:Object in contextTabBar.getChildren())
		{
			var c:Context = Context(obj_context);
			
			// if you clicked a context
			if (c.xmlRef == data)
			{
				contextTabBar.selectedChild = c;
				return;
			}
			
			for each (var obj_tab:Object in c.navigator.getChildren())
			{
				var t:Tab = Tab(obj_tab);
				
				// found the target
				if (t.xmlObject == data)
				{
					contextTabBar.selectedChild = c;
					c.navigator.selectedChild = t;
					return;
				}
			}
		}	
	}
	
	public function activeTreeItemDoubleClicked(e:ListEvent):void
	{
		var data:XML = XML(e.itemRenderer.data);
	
		if (data.localName() == "context" || data.localName() == "tab")
		{
			focusContextAndTab(data);
		}
		
		if (data.localName() == "bookmark")
		{
 			var context:XML = data;
 			
 			context = getParentWithLocalName("context", data);
 			if (context == null) return;
 			
 			focusContextAndTab(context);
 			addNewTabToCurrentContext(data.@address);
		}
	
	}
	
	public function focusAfterCreation(e:FlexEvent):void
	{
		if (e.target is Tab)
		{
			var t:Tab = Tab(e.target);
			SuperTabNavigator(t.parent).selectedChild = t;
		}
		
		if (e.target is Context)
		{
			var c:Context = Context(e.target);
			SuperTabNavigator(c.parent).selectedChild = c;
		}
	}
	
	public function activateContextAndTab(node:XML): Context
	{
 		var context:XML = node;
 		
 		
 		context = getParentWithLocalName("context", context);
 		if (context == null) return null;
 		
        var currentContext:Context = addContext(context.@label, context);
        currentContext.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, focusAfterCreation);
       
        for each (var tab:XML in context.tabs.tab)
        {
        	var tabpage:Tab = addTab(tab, currentContext.navigator);
        	if (tab==node)
        	{
        		tabpage.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, focusAfterCreation);
        	}   
        }

		context.@active="true";  
		
		return currentContext;
	}
	
	public function openTabAfterCreation(e:FlexEvent):void
	{
		if (e.target is Context)
		{
			var c:Context = e.target as Context;
			if (c.addressToOpen != "")
			{
				addNewTabToContext(c, c.addressToOpen);
				c.addressToOpen = "";
			}
		}
	}
	
	public function inactiveTreeItemDoubleClicked(e:ListEvent):void
    {
		var data:XML = XML(e.itemRenderer.data);
	
		if (data.localName() == "context" || data.localName() == "tab")
		{
			activateContextAndTab(data);
		}
		
		if (data.localName() == "bookmark")
		{
 			var context:XML = data;
 			
 			context = getParentWithLocalName("context", data);
 			if (context == null) return;
 			
 			var activatedContext:Context = activateContextAndTab(context);
 			if (activatedContext == null) return;
 			
 			activatedContext.addressToOpen = data.@address;
 			activatedContext.addEventListener(mx.events.FlexEvent.CREATION_COMPLETE, openTabAfterCreation);
			
		}


   }
	
	public function addContextWithTabBarButton(e:Event):void
	{
		var newContextXML:XML = <context active="true" label="New Group"><tabs label="Tabs"/></context>; 
        contexts.appendChild(newContextXML);
		var newContext:Context = addContext("New Group", newContextXML);
		
		var newTabXML:XML =new XML("<tab label=\"" + homepage + "\" address=\"" + homepage + "\" />");
        newContextXML.tabs[0].appendChild(newTabXML);
        addTab(newTabXML, newContext.navigator);
		
		// set context focus
		contextTabBar.selectedIndex = contextTabBar.numChildren-1;
	}
	
	public function getCurrentTabNavigator():SuperTabNavigator
	{
		return Context(contextTabBar.selectedChild).navigator;
	}
	
	public function getCurrentTab():Tab
	{
		return Tab(getCurrentTabNavigator().selectedChild);
	}
	
	public function addBookmarkToContext(context:Context, label:String, address:String): void
	{
		var newBookmarkXML:XML = new XML("<bookmark label=\"" + label + "\" address=\"" + address + "\" />"); 
        context.xmlRef.bookmarks.appendChild(newBookmarkXML);
	}
	
	public function addNewTabToContext(context:Context, address:String):void
	{
		var newTabXML:XML = new XML("<tab label=\"" + address + "\" address=\"" + address + "\" />"); 
        context.xmlRef.tabs.appendChild(newTabXML);

		addTab(newTabXML, getCurrentTabNavigator());
		
		//set tab focus
		getCurrentTabNavigator().selectedIndex = getCurrentTabNavigator().numChildren-1;
	}
	
	public function addNewTabToCurrentContext(address:String):void
	{
		addNewTabToContext(Context(contextTabBar.selectedChild), address);
	}
	
	public function addTabWithTabBarButton(e:Event):void
	{
		addNewTabToCurrentContext(homepage);
	}
	
	public function updateAddressBar(e:Event=null):void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  addressInput.text = currentTab.htmlPane.location;
		}
	}
	
	public function contextTabRenamed(e:SuperTabEvent):void
	{
		var context:Context = Context(contextTabBar.getChildAt(e.tabIndex));
		context.xmlRef.@label = context.label; 
	}
	
	private function xmlDeleteNode(xmlToDelete:XML):Boolean
	{
		var cn:XMLList = XMLList(xmlToDelete.parent()).children();
     
		for ( var i:Number = 0 ; i < cn.length() ; i++ )
		{
			if ( cn[i] == xmlToDelete )
			{
       			delete cn[i];       
				return true;
			}
		}    
		return false;
    
	}
	
	public function tabClose(e:flexlib.events.SuperTabEvent):void
	{
		if (SuperTabNavigator(e.target).getChildren().length <= 1)
			return;
			
		var t:Tab = Tab(SuperTabNavigator(e.target).getChildAt(e.tabIndex));
		var xml:XML = t.xmlObject;
		xmlDeleteNode(xml);
		t.xmlObject = null;
	}
	
	public function contextClose(e:flexlib.events.SuperTabEvent):void
	{
		if (SuperTabNavigator(e.target).getChildren().length <= 1)
			return;
		
		var c:Context = Context(SuperTabNavigator(e.target).getChildAt(e.tabIndex));
		var xml:XML = c.xmlRef;
		xml.@active = "false";
	}
	
	public function changeTabURLinFocus(address:String):void
	{
		getCurrentTab().htmlPane.location = address;
		getCurrentTab().xmlObject.@address = address;
	}
	
	private function addContext(lbl:String, xmlRef:XML):Context
	{
		if(lbl=="") lbl = "(Default)";

		var context:Context = new Context();
		context.label = lbl;
		context.xmlRef = xmlRef;
		context.setStyle("closable", true);
		if(icon) {
			context.icon = icon;
		}
		else {
			context.icon = document_icon;
		}
		
		contextTabBar.addChild(context);
		context.navigator.setType(SuperTabNavigator.TAB, contextMenuEventHandler);
		context.navigator.addEventListener(SuperTabNavigator.AddTabEvent, addTabWithTabBarButton);
		context.navigator.addEventListener(SuperTabEvent.TAB_CLOSE, tabClose);
		context.navigator.addEventListener(IndexChangedEvent.CHANGE, updateAddressBar);
		
		return context;
	}
	
	private function addTab(xmlObj:XML, navigator:SuperTabNavigator, icon:Class=null):Tab 
	{
		if(xmlObj==null)
		{
			xmlObj = new XML("<tab label=\"(untitled)\" address=\"" + homepage + "\" />");
		}
		
		var tab:Tab = new Tab();
		tab.setStyle("closable", true);
		tab.label = xmlObj.@label;
		if(icon) {
			tab.icon = icon;
		}
		else {
			tab.icon = document_icon;
		}
		tab.addEventListener(Tab.locationChangedEvent, locationChanged);
		navigator.addChild(tab);
		tab.htmlPane.location = xmlObj.@address;
		tab.xmlObject = xmlObj;
		
		return tab;
	}
	
	public function locationChanged(e:Event):void
	{
		updateAddressBar();
	}
	
	
	/* this part is related to the quick info panel
	 * Tao Su
	 */
	 
	public function listMouseMove(event:Event):void
	{
		if (event.type != flash.events.MouseEvent.MOUSE_MOVE) return;
		if (floatPanel.visible)
			floatPanel.move(sidebar.x + sidebar.width, flash.events.MouseEvent(event).stageY);
			
	}
	
	public function floatPanelTimerTimeout(event:TimerEvent):void
	{
		floatPanel.visible = currentListIndex >=0;
	}
		
	public function listMouseOver(event:Event):void
	{
		//if (event.type != flash.events.MouseEvent.MOUSE_OVER) return;
		//floatbox.visible = true;
	}
		
	public function listMouseOut(event:Event):void
	{
		//if (event.type != flash.events.MouseEvent.MOUSE_OUT) return;
		//floatbox.visible = false;
	}
		
	public function listItemRollOver(event:ListEvent):void 
	{
		if (event.type != mx.events.ListEvent.ITEM_ROLL_OVER) return;
		currentListIndex = event.rowIndex;
		
		var xml:XML = XML(event.itemRenderer.data);
		
		floatPanel.title = xml.@label;
		if (xml.attribute("address") != null)
			htmlPreviewPane.location = xml.@address;
		else
			htmlPreviewPane.location = "about:blank";
		//floatbox.dataProvider = event.itemRenderer.data;
	}

	public function listItemRollOut(event:Event):void 
	{
		if (event.type != mx.events.ListEvent.ITEM_ROLL_OUT) return;
		currentListIndex = -1;
		//htmlPreviewPane.location = "";
    }
	 
	/*
	 * end : quick info panel
	 */
	
]]>
</mx:Script>

	<mx:VBox x="9" y="9" width="100%" height="100%">
		<mx:HBox width="100%" height="25">
			<mx:Text textAlign="left" height="31" text="Address"/>
			<mx:TextInput width="100%" height="25" id="addressInput" enter="changeTabURLinFocus(addressInput.text);"/>
			<mx:Button label="Go" width="42" height="24" click="changeTabURLinFocus(addressInput.text);"/>
		</mx:HBox>
		<mx:HDividedBox width="100%" height="100%">
			<mx:Accordion id="sidebar" width="150" height="100%">
				<mx:Canvas label="Active" width="100%" height="100%">
					<mx:Tree id="treeActive" x="0" y="0" width="100%" height="100%" 
						dataProvider="{contexts.context.(@active == 'true')}"  
						labelField="@label"
						doubleClickEnabled="true"
						itemDoubleClick="activeTreeItemDoubleClicked(event)"
						itemRollOver="listItemRollOver(event)"
						itemRollOut="listItemRollOut(event)"
						mouseOver="listMouseOver(event)"
						mouseOut="listMouseOut(event)"
						mouseMove="listMouseMove(event)"
						/>					
				</mx:Canvas>
				<mx:Canvas label="Inactive" width="100%" height="100%">
					<mx:Tree id="treeInactive" x="0" y="0" width="100%" height="100%" 
						dataProvider="{contexts.context.(@active == 'false')}" 
                        labelField="@label" 
                        doubleClickEnabled="true"
                        itemDoubleClick="inactiveTreeItemDoubleClicked(event)"
						itemRollOver="listItemRollOver(event)"
						itemRollOut="listItemRollOut(event)"
						mouseOver="listMouseOver(event)"
						mouseOut="listMouseOut(event)"
						mouseMove="listMouseMove(event)"
                        />
				</mx:Canvas>
				
			</mx:Accordion>
			<flexlib:SuperTabNavigator id="contextTabBar" scrollSpeed="25" dropShadowEnabled="true"
				stopScrollingEvent="{MouseEvent.MOUSE_OUT}" startScrollingEvent="{MouseEvent.MOUSE_OVER}"
				width="100%" height="100%" horizontalGap="0" editableTabLabels="true"
				closePolicy="{SuperTab.CLOSE_ALWAYS}"/>
		</mx:HDividedBox>
	</mx:VBox>
	
	<mx:Fade id="showFade" alphaFrom="0" alphaTo="1" duration="200"/>
	<mx:Fade id="hideFade" alphaFrom="1" alphaTo="0"  duration="200"/>
	<mx:Panel id="floatPanel" x="200" y="28"  visible="false" width="300" height="200" layout="absolute"
		showEffect="{showFade}" hideEffect="{hideFade}" >
		
		<mx:HTML id="htmlPreviewPane" width="100%" height="100%" 
		scaleX="0.25" scaleY="0.25"/>

	</mx:Panel>

</mx:WindowedApplication>
