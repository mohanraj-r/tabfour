<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="flexlib.containers.*"
	layout="absolute" width="800" height="600" windowComplete="init()">
<mx:Script>
<![CDATA[
	import mx.events.IndexChangedEvent;
	import mx.events.MenuEvent;
	import mx.core.Container;
	import mx.containers.*;
	import mx.controls.Label;
	import mx.controls.HTML;
	import flexlib.controls.tabBarClasses.SuperTab;
	import mx.events.ListEvent;
	[Bindable]
	public var contexts:XML;
	public var homepage:String = "http://www.cbc.ca";
	public var contextFilename:String = "test.xml";
	
	[Embed(source="./flexlib/assets/document.png")]
	private var document_icon:Class;
	
	[Embed(source="./flexlib/assets/home.png")]
	private var home_icon:Class;

	public function init():void
	{
		//save before exiting
		NativeApplication.nativeApplication.addEventListener(Event.EXITING, applicationExitHandler);
		
		contextTabBar.addEventListener(SuperTabNavigator.AddTabEvent, addContextWithTabBarButton);
		contextTabBar.addEventListener(IndexChangedEvent.CHANGE, updateAddressBar);
		
		loadContexts();
		initContexts();
	}
	
	public function applicationExitHandler(e:Event):void
	{
		saveContexts();
	}
	
	public function loadContexts():void
	{
		var file:File = File.applicationDirectory.resolvePath(contextFilename);
        var fileStream:FileStream = new FileStream();
        fileStream.open(file, FileMode.READ);
        var stringRead:String = fileStream.readUTFBytes(fileStream.bytesAvailable);
        contexts = XML(stringRead);
        fileStream.close();
	}
	
	public function saveContexts():void
	{
		var file:File = new File(File.applicationDirectory.nativePath.toString() + "/" + contextFilename);
        var fileStream:FileStream = new FileStream();
        fileStream.open(file, FileMode.WRITE);
        fileStream.writeUTFBytes(contexts.toXMLString());
        fileStream.close();
	}
	
	public function initContexts():void
	{
		var activeContexts:XMLList = contexts.context.(@active == 'true');
		if( activeContexts.length() == 0 )
		{
			var newContextXML:XML = <context active="true" label="Default"><tabs label="Tabs"/></context>; 
			contexts.appendChild(newContextXML);
    		var defaultContext:Context = addContext("Default", newContextXML);
    		addTab(new XML("<tab label=\"" + homepage + "\" address=\"" + homepage + "\" />"), defaultContext.navigator);
    		var newTabXML:XML = <tab />;
    		newTabXML.@address = homepage;
    		newTabXML.@label = homepage;
    		newContextXML.tabs[0].appendChild(newTabXML);
        } else
        {
        	for each (var activeContext:XML in activeContexts)
        	{
                var currentContext:Context = addContext(activeContext.@label, activeContext);
                for each (var tab:XML in activeContext.tabs.tab)
                {
                	addTab(tab, currentContext.navigator);
                }
        	}
        }
	}
	
	public function activeTreeItemDoubleClicked(e:ListEvent):void
	{
		var data:XML = XML(e.itemRenderer.data);
		
		for each(var obj_context:Object in contextTabBar.getChildren())
		{
			var c:Context = Context(obj_context);
			for each (var obj_tab:Object in c.navigator.getChildren())
			{
				var t:Tab = Tab(obj_tab);
				
				// found the target
				if (t.xmlObject == data)
				{
					contextTabBar.selectedChild = c;
					c.navigator.selectedChild = t;
					return;
				}
			}
		}	
	}
	
	public function inactiveTreeItemDoubleClicked(e:ListEvent):void
    {
        trace(XML(e.itemRenderer.data).localName());
    }
	
	public function addContextWithTabBarButton(e:Event):void
	{
		var newContextXML:XML = <context active="true" label="New Group"><tabs label="Tabs"/></context>; 
        contexts.appendChild(newContextXML);
		addContext("New Group", newContextXML);
		
		// set context focus
		contextTabBar.selectedIndex = contextTabBar.numChildren-1;
	}
	
	public function getCurrentTabNavigator():SuperTabNavigator
	{
		return Context(contextTabBar.selectedChild).navigator;
	}
	
	public function getCurrentTab():Tab
	{
		return Tab(getCurrentTabNavigator().selectedChild);
	}
	
	public function addTabWithTabBarButton(e:Event):void
	{ 
		addTab(new XML("<tab label=\"" + homepage + "\" address=\"" + homepage + "\" />"), getCurrentTabNavigator());
		
		
		
		//set tab focus
		getCurrentTabNavigator().selectedIndex = getCurrentTabNavigator().numChildren-1;
	}
	
	public function updateAddressBar(e:Event=null):void
	{
		var currentTab:Tab =  getCurrentTab()
		if(currentTab != null)
		{
		  addressInput.text = currentTab.htmlPane.location;
		}
	}
	
	public function changeTabURLinFocus(address:String):void
	{
		getCurrentTab().htmlPane.location = address;
		getCurrentTab().xmlObject.@address = address;
	}
	
	private function addContext(lbl:String, xmlRef:XML):Context
	{
		if(lbl=="") lbl = "(Default)";

		var context:Context = new Context();
		context.label = lbl;
		context.xmlRef = xmlRef;
		context.setStyle("closable", true);
		if(icon) {
			context.icon = icon;
		}
		else {
			context.icon = document_icon;
		}
		contextTabBar.addChild(context);
		context.navigator.addEventListener("AddTab", addTabWithTabBarButton);
		context.navigator.addEventListener(IndexChangedEvent.CHANGE, updateAddressBar);
		
		return context;
	}
	
	private function addTab(xmlObj:XML, navigator:SuperTabNavigator, icon:Class=null):Tab 
	{
		if(xmlObj==null)
		{
			xmlObj = new XML("<tab label=\"(untitled)\" address=\"" + homepage + "\" />");
		}
		
		var tab:Tab = new Tab();
		tab.setStyle("closable", true);
		tab.label = xmlObj.@label;
		if(icon) {
			tab.icon = icon;
		}
		else {
			tab.icon = document_icon;
		}
		tab.addEventListener(Tab.locationChangedEvent, locationChanged);
		navigator.addChild(tab);
		tab.htmlPane.location = xmlObj.@address;
		tab.xmlObject = xmlObj;
		
		return tab;
	}
	
	public function locationChanged(e:Event):void
	{
		updateAddressBar();
	}
]]>
</mx:Script>

	<mx:VBox x="9" y="9" width="100%" height="100%">
		<mx:HBox width="100%" height="25">
			<mx:Text textAlign="left" height="31" text="Address"/>
			<mx:TextInput width="100%" height="25" id="addressInput" enter="changeTabURLinFocus(addressInput.text);"/>
			<mx:Button label="Go" width="42" height="24" click="changeTabURLinFocus(addressInput.text);"/>
		</mx:HBox>
		<mx:HDividedBox width="100%" height="100%">
			<mx:Accordion width="150" height="100%">
				<mx:Canvas label="Active" width="100%" height="100%">
					<mx:Tree id="treeActive" x="0" y="0" width="100%" height="100%" 
						dataProvider="{contexts.context.(@active == 'true')}"  
						labelField="@label"
						change="/*addressInput.text = treeActive.selectedItem.@address; changeTabURLinFocus(addressInput.text);*/"
						doubleClickEnabled="true"
						itemDoubleClick="activeTreeItemDoubleClicked(event)"/>					
				</mx:Canvas>
				<mx:Canvas label="Inactive" width="100%" height="100%">
					<mx:Tree id="treeInactive" x="0" y="0" width="100%" height="100%" 
						dataProvider="{contexts.context.(@active == 'false')}" 
                        labelField="@label" 
                        change="addressInput.text = treeInactive.selectedItem.@address; changeTabURLinFocus(addressInput.text);"
                        doubleClickEnabled="true"
                        itemDoubleClick="inactiveTreeItemDoubleClicked(event)"/>
				</mx:Canvas>
				
			</mx:Accordion>
			<flexlib:SuperTabNavigator id="contextTabBar" scrollSpeed="25" dropShadowEnabled="true"
				stopScrollingEvent="{MouseEvent.MOUSE_OUT}" startScrollingEvent="{MouseEvent.MOUSE_OVER}"
				width="100%" height="100%" horizontalGap="0" editableTabLabels="true"
				closePolicy="{SuperTab.CLOSE_ALWAYS}"/>
		</mx:HDividedBox>
	</mx:VBox>
</mx:WindowedApplication>
